/*
 * Copyright 2017 (C) Tom Parker <thpr@users.sourceforge.net>
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place,
 * Suite 330, Boston, MA 02111-1307 USA
 */
package pcgen.base.util;

import java.lang.reflect.Array;
import java.util.function.IntFunction;

/**
 * ArrayUtilities is a utility class designed to provide utility methods when working with
 * Arrays.
 */
public final class ArrayUtilities
{

	private ArrayUtilities()
	{
		//Do not construct utility class
	}

	/**
	 * Returns an IntFunction that will generate an array of a specific class, based on
	 * the length provided to the IntFunction. Intended to be used in a Stream.
	 * 
	 * @param arrayClass
	 *            The class of object for the array to be generated by the IntFunction
	 * @return An IntFunction that will generate an array of a specific class, based on
	 *         the length provided to the IntFunction
	 * @param <T>
	 *            The component type of the Array to be generated
	 */
	@SuppressWarnings("unchecked")
	public static <T> IntFunction<T[]> buildOfClass(Class<T> arrayClass)
	{
		return size -> (T[]) Array.newInstance(arrayClass, size);
	}

	/**
	 * Returns an empty (and properly-cast) Array of a given Class
	 * 
	 * @param componentClass
	 *            The Class for which an empty Array will be built
	 * @param <T>
	 *            The format of the class for which the empty array will be built
	 * @return An empty (and properly-cast) Array of a given Class
	 */
	@SuppressWarnings("unchecked")
	public static <T> T[] buildEmpty(Class<T> componentClass)
	{
		return (T[]) Array.newInstance(componentClass, 0);
	}

	/**
	 * Returns an Array matching the class of the given array. If the given array is less
	 * than the size provided, then a new Array of the same type will be constructed.
	 * Otherwise, the given array will be returned.
	 * 
	 * @param minSize
	 *            The minimum size of the array to be returned
	 * @param candidateArray
	 *            The candidate array to be used as a template or returned
	 * @return An Array matching the class of the given array. If the size is appropriate,
	 *         the candidate array will be returned
	 * @param <T>
	 *            The component type of the Array to be returned
	 */
	public static <T> T[] ensureSizedArray(int minSize, T[] candidateArray)
	{
		//Protect against small array
		if (candidateArray.length < minSize)
		{
			Class<?> retClass = candidateArray.getClass().getComponentType();
			@SuppressWarnings("unchecked")
			T[] array = (T[]) Array.newInstance(retClass, minSize);
			return array;
		}
		return candidateArray;
	}

	/**
	 * Returns an IntFunction that will generate an array of a specific class, based on
	 * the candidate array provided and the length provided to the IntFunction. Intended
	 * to be used in a Stream.
	 * 
	 * @param candidateArray
	 *            The candidate array to be used as a template for a new array, or
	 *            returned if possible
	 * @return An IntFunction that will generate an array of a specific class, based on
	 *         the candidate array provided and the length provided to the IntFunction
	 * @param <T>
	 *            The component type of the Array to be returned by the IntFunction
	 */
	public static <T> IntFunction<T[]> usingArray(T[] candidateArray)
	{
		return x -> ensureSizedArray(x, candidateArray);
	}

}
